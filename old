        for(unsigned int ty = y; ty < y + tilesize && ty < _ny + 1; ty++){
            for(unsigned int tx = x; tx < x + tilesize && tx < _nx + 1; tx++){
                    printf("%d ", pos);
                    writePtr[pos] = _RHS * rhsPtr[pos];
                    writePtr[pos] += _X * (readPtr_W[pos] + readPtr_E[pos]);
                    writePtr[pos] += _Y * (readPtr_S[pos] + readPtr_N[pos]);
                    pos++;
            }
            printf("\n");
            pos += tilesize +1;
        }

        inner





  void iterate(const FLOAT *const readField, FLOAT *const writeField, const FLOAT *const rhs) const
  {
    // set pointers of 5-point stencil (only neighbour values) to very first inner grid point
    const FLOAT *readPtr_S = readField + 1;
    const FLOAT *readPtr_W = readField + (_nx + 2);
    const FLOAT *readPtr_E = readField + (_nx + 4);
    const FLOAT *readPtr_N = readField + (2 * _nx + 5);

    const FLOAT *rhsPtr = rhs + (_nx + 3);

    FLOAT *writePtr = writeField + (_nx + 3);

    // use pos to advance access through the whole grid without any expensive index computations
    unsigned int tilesize = 4;
    unsigned int pos = 0;
    #pragma omp parallel for collapse(2)
    for (unsigned int y = 1; y < _ny + 1; y+=tilesize)
    {
        for (unsigned int x = 1; x < _nx + 1; x+=tilesize)
        {
            int count = 0;
            for(unsigned int ty = y; ty < y + tilesize && ty < _ny + 1; ty++){
                for(unsigned int tx = x; tx < x + tilesize && tx < _nx + 1; tx++){
                    writePtr[pos] = _RHS * rhsPtr[pos];
                    writePtr[pos] += _X * (readPtr_W[pos] + readPtr_E[pos]);
                    writePtr[pos] += _Y * (readPtr_S[pos] + readPtr_N[pos]);
                    //printf("%d ", pos);
                    pos++;
                    if(tx == _nx){
                        pos+=1;
                    }
                }

                //printf("\n");
                pos += _ny + 2;
                pos -= tilesize;
                count++;

            }
            //printf("Count: %d\n", count);
            //printf("Old: %d ", pos);

            pos += tilesize;
            //printf("Mid: %d ", pos);
            pos -= (count) * (_ny + 2);
            count = 0;
            //printf("new: %d\n", pos);
      }
      //printf("\n full old: %d ", pos);
      pos += (tilesize - 1) * (_ny + 2) + 1;
      //printf("new: %d\n", pos);
    }
    }